
========= CRIAÇÃO DE TABELAS ==================
CREATE TABLE clientes (
	cod_cliente INT PRIMARY KEY,
	nome_cliente VARCHAR(20) NOT NULL,
	sobrenome_cliente VARCHAR(40) NOT NULL,
);
CREATE TABLE produtos (
	cod_produto iINT primary key,
	nome_produto VARCHAR(30) NOT NULL,
	descricao TEXT NULL				// Tipo TEXT aceita longa descrição e NULL pode ser deixado em branco.//
	preco NUMERIC CHECK(preco > 0) NOT NULL 				//NUMERIC aceita casas decimais//
qtde_estoque SMALLINT DEFAULT 0
);
CREATE TABLE pedidos (
	cod_pedido SERIAL PRIMARY KEY,
	cod_cliente INT NOT NULL REFERENCES clientes(cod_cliente),
	cod_produto INT NOT NULL,
	qtde SMALLINT NOT NULL,
	FOREIGN KEY (cod_produto) REFERENCES produtos(cod_produto)
);
=================== INSERT ===========================
INSERÇÃO DE REGISTROS NA TABELA (INSERT INTO)
INSERT INTO produtos (cod_produto, nome_produto, descricao, preco, qtde_estoque)
	VALUES (1, '8A7ABAHJS', 'HAOSQOH', 'ALKSLAK019209', 1233.22),
nome_coluna

* Ver o nome e os telefones de cada cliente em tabelas diferentes.

========================== SELECT ============================
SELECT	coluna FROM tabelas
	CONDIÇÕES

	SELECT clientes.nome AS clientela,
  		fones_clientes.num_telefone AS whatsapp
			FROM clientes, fones_clientes;


========================== WHERE ======================================
* A cláusula WHERE filtra por uma informação específica.
SELECT nome, endereco, cpf, cnpj, TIPO_CLIENTE FROM clientes
	WHERE tipo_cliente = 'J'
		ORDER BY endereco DESC;

*ORDER BY ASC ordena o resultado de forma ascendente DESC em ordem decrescente.

*Buscar por informação específica 
SELECT fornecedores.descricao, fornecedores.endereco AS localizacao 
	FROM fornecedores
		where endereco IN ('Marechal Deodoro');

- Subconsultas sempre serão realizadas após a cláusula FROM.
========================== BETWEEN ========================================
* Comparação intervalo de dados

SELECT  numero_nota, valor_total
	FROM compras
		WHERE valor_total BETWEEN 5000 and 7200 
			ORDER BY valor_total DESC;



========================= JUNÇÕES ======================================
 INNER JOIN
Para se obter dados provenientes de duas ou mais tabelas, deve ser escrita uma condição de junção
na cláusula WHERE.
SELECT tabela1.coluna1, tabela2.coluna2
FROM tabela1, tabela2
WHERE tabela1.coluna1 = tabela2.coluna2;


Uma junção onde há uma condição de igualdade entre os atributos das tabelas (normalmente entre
a chave primária de uma tabela e a chave estrangeira de outra tabela).


A cláusula HAVING vem sempre depois da cláusula GROUP BY, sem uma cláusula GORUP BY  não pode existir uma cláusula HAVING.
WHERE é usado para filtrar colunas específicas.

HAVING é usado em agregações.

============================================================ UPDATE =====================================================
UPDATE clientes 
	SET rg =  777
		WHERE codcliente = 100;


UPDATE clientes 
	SET rg = 30809001, cpf = 18263435, cnpj = 2248588
		WHERE codcliente = 104;


=========================================================================================================================
TRUNCATE TABLE = Limpa os registros de uma tabela
TRUNCATE TABLE nomeTabela;
=========================================================================
RENOMEAÇÃO DE TABELA 
ALTER TABLE nome-tabela
	RENAME TO nome_nome;
INCLUSÃO DE UMA COLUNA EM UMA TABELA
ALTER TABLE nome-tabela	
	ADD new_num_column INTEGER,
	ADD new_text_column VARCHAR(30);

=========================================================================================================================
ARRAYS
nome_coluna tipo []

CREATE TABLE escalaTrabalho (
	codFunc smallint,
	escala char(3)[]
);

INSERT INTO escalaTrabalho(codFunc,escala)
	VALUES 
		(1,'{"SEG","TER","QUA"}'),
		(2,'{"QUI","SEX","SAB"}');


=========================================================================================================================


Raiz quadrada e Raiz cúbica
SELECT |/ 36 AS Resultado;
SELECT ||/ 21 AS Resultado;

===========================================================================================================================

*************************************************** JUNÇÕES **************************************************************







============================================ FUNÇÕES DE AGREGAÇÃO =========================================================
COUNT() conta o número de valores (conta todas as linhas incluindo os valores nulos)
SUM() calcula a soma de uma coluna
AVG() calcula a media de uma coluna
MIN() encontra o valor mínimo de uma coluna
MAX() encontra o valor máximo de uma coluna

As funções de agregação ficam localizadas nas cláusulas SELECT E HAVING
SELECT COUNT(*) AS total_linhas,
	AVG(idade) AS media_idade
		FROM my_table;

SELECT regiao, MIN(idade), MAX(idade)
	FROM my_table
		GROUP BY regiao
			HAVING MIN(idade) < 18;

* As funções LEAST e GREATEST encontram o menor e o maior valor dentro de uma linha.


RANDOM() essa função gera números aleatórios.

CAST essa função é utilizada para converter tipos de dados.

SELECT * FRM my_table
	WHERE CAST(stringColuna AS DECIMAL) > 3; // essa consulta converteu os dados da coluna "stringColuna" em decimal.


TRIM() remove os espaços a esquerda e a direita de uma string.

CONCAT() usado para concatenar strings
SELECT CONCAT(id, '_', name) AS id_name
	FROM  my_table;

ou (id || _ || name)


SELCT CURRENT_DATE::VARCHAR;
2024-08-08
============================================================ GROUP BY ==========================================================================
			* Agrupa os dados com base nos campos informados
SELECT uf, COUNT(*) 
	FROM clientes 
		GROUP BY uf
			HAVING COUNT(*) > 2;

* where é uma filtragem feita em cima do select, enquanto o having é uma 
	filtragem feita em cima do GROUP BY.

*DISTINCT seleciona registros sem repetição segundo os campos especificados.
	SELECT DISTINCT uf FROM clientes;



========================================================= TO_CHAR ============================================
escrever uma consulta que retorne a data atual no formato dia-mês ano:
SELECT TO_CHAR(CURRENT_DATE, 'DD/MM/YYYY');


============================================================ EXISTS =================================
Testa a existência de registros em uma subconsulta.

Quais as disciplinas que não têm nenhum pré-requisito?

SELECT a.nome 
	FROM disciplina a 
		WHERE NOT EXISTIS (
			SELECT * FROM prerequisito b
				WHERE a.codDisciplina = b.codDisciplina
		);









